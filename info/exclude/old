/*
            List<KeyValuePair<string, int>> l = new List<KeyValuePair<string, int>>();
            BinaryReader binaryReader = new BinaryReader(File.OpenRead("d:\\temp\\index\\mbd28rueng.vcc"));
            binaryReader.ReadInt32();
            try
            {
                string prevn = "";
                do
                {
                    int gr = binaryReader.ReadInt32();
                    int n = binaryReader.ReadByte();
                    int dl = binaryReader.ReadByte();
                    string name = "";
                    if (n > 0) name += prevn.Substring(0, n);
                    byte[] b = binaryReader.ReadBytes(dl);
                    for (int q = 0; q < dl; q++)
                        if (b[q] == 0) break;
                        else
                        {
                            name += (char)(b[q]);
                        }

                    prevn = name;
                    l.Add(new KeyValuePair<string, int>(name, gr));
                }
                while (true);
            }
            catch (EndOfStreamException e)
            {

            }



            int prevg = -1;
            List<string> words = new List<string>();
            VocGroup group = new VocGroup();
            List<VocRecord> voc = new List<VocRecord>();
            List<VocGroup> resGr = new List<VocGroup>();
            l.Add(new KeyValuePair<string, int>(" ", 0)); // end element to finish last group
            foreach (KeyValuePair<string,int> item in l){
                if (item.Value != prevg)
                {
                    if (prevg != -1)
                    {
                        if (words.Count > 1)
                        {
                            // alalizing group
                            int maxlen = (from _w in words let len = _w.Length select len).Max();
                            bool[] cont = new bool[words.Count];
                            int totalsaves = 0;
                            int maxsaves = 0;
                            string root = "";
                            string maxroot = "";
                            for (int w = 0; w < maxlen; w++)
                            {// w - is the number of letter in the word
                                int nextsaves = 0;
                                char nextletter = ' ';
                                for (int i = 0; i < words.Count; i++)
                                    if (cont[i]) // still 
                                    {

                                        if (words[i].Length <= w) cont[i] = false;
                                        else
                                        {
                                            // number of words starting with root+letter
                                            totalsaves = (root.Length + 1) * ((from _w in words where _w.StartsWith(root + words[i][w]) select _w).Count());
                                            if (totalsaves > nextsaves)
                                            {
                                                nextsaves = totalsaves;
                                                nextletter = words[i][w];
                                            }
                                        }
                                    }
                                // for
                                if ((nextsaves > 0) && (nextsaves > maxsaves))
                                {
                                    root += nextletter;

                                }
                                else break;

                            }
                            // now we have root 
                            // extract root from all
                            foreach (string s in (from _w in words where _w.StartsWith(root) select _w))
                            {
                                s.Remove(0, root.Length);
                                s.Insert(0, "|");
                            }
                            group.root = root;
                        }
                        else group.root = words[0];

                        foreach (string s in words)
                        {
                            VocRecord rec = new VocRecord(s, group);
                            group.words.Add(rec);
                            voc.Add(rec);
                        }

                    }
                    group = new VocGroup();
                    group.id = item.Value;
                    resGr.Add(group);


                    words.Clear();
                    prevg = item.Value;
                }
               
                words.Add(item.Key);
            }

            binaryReader.Close();
            BinaryWriter binaryWriter = new BinaryWriter(File.Create("D:\\temp\\index\\rueng.voc"));
            foreach (VocGroup rec in resGr)
            {
                binaryWriter.Write(rec.id);
                binaryWriter.Write(rec.root);
                binaryWriter.Write(rec.words.Count);
                foreach (VocRecord r in rec.words)
                {
                    binaryWriter.Write(r.suff);
                }

            }
            binaryWriter.Close();
            */